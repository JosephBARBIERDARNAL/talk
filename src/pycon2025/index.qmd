---
title: "Tout ce dont votre package a besoin"
author: "Joseph Barbier - *PyCon2025*"
format:
  revealjs:
    theme: [default, style.scss]
    transition: slide
    background-transition: fade
    incremental: true
    auto-stretch: false
embed-resources: true
echo: true
---

## A propos

<br>

:::: {.columns}

::: {.column width="35%"}
![](joseph.png){.circle}
<div style="font-size:0.6em;">
   *Joseph Barbier*

   <br><br>

   <a href="https://barbierjoseph.com">barbierjoseph.com</a>

   <a href="https://ysunflower.com">ysunflower.com</a>

</div>
:::

::: {.column width="15%"}
:::

::: {.column width="50%"}
<div style="font-size: 1.2em;">
   Freelance

   Open source

   Data(viz)

   ![](viz.png)
</div>
:::

::::

## Le bon package et le mauvais package



![](./meme-bon-mauvais-package.png){width=40%}


Un bon package **c'est pas (uniquement) une question de code**.

- facile √† comprendre ?
- facile √† utiliser ?
- facile √† d√©velopper ?


## TLDR: package Python

```python
def my_super_cool_function(arg):
    if arg == "cool":
        something = 123
    else:
        ...

    ...

    return something
```

:::: {.columns}

::: {.column width="20%"}
:::

::: {.column width="30%"}
![](./arrow.svg){width=80%}
:::

::: {.column width="50%"}
![](./pkg.jpg){width=60%}
:::

::::

Facilement **distribuable** et donc **reutilisable** !


## Sommaire

<br>
<br>

### Votre package a besoin de ces 4 choses, <b>la derni√®re va vous surprendre üò±</b> !

<br>

- Ne jamais commit une erreur
- Tester dans les meilleures conditions
- Configuration du `pyproject.toml`
- Cr√©er <span style="background-color:black; color: black;">la meilleure documentation</span>


## Parlons style de code !

![](meme-word-ide-2.png){fig-align="center" width="60%"}

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B
```

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
     return np.sum([A, B])
```

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
     return np.sum([A, B])


def divideNums( A , B):
        return A/B
def multiply(a,b ):
 return  a *b
```

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
     return np.sum([A, B])


def divideNums( A , B):
        return A/B
def multiply(a,b ):
 return  a *b

def main( ) :
    x= add_nums(2,  3)
#some comment
    y=multiply( x ,4 )                            # in the middle of the sea
    print( "sum:",x  )
    print("product:" ,  y)
```

##

```{python}
import numpy as np


def add_nums(A, B):
    return A + B

def add_nums_numpy(A, B):
    return np.sum([A, B])

def divideNums(A, B):
    return A / B

def multiply(a, b):
    return a * b

def main():
    x = add_nums(2, 3)
    # some comment
    y = multiply(x, 4)  # in the middle of the sea
    print("sum:", x)
    print("product:", y)
```

##

:::: {.columns}

::: {.column width="50%"}
![](./meme-formateur.jpg)
:::

::: {.column width="10%"}
:::

::: {.column width="40%"}
<br>
[ruff](https://docs.astral.sh/ruff/) est probablement la meilleure option

<br>

2 mani√®res d'utiliser :

- "on save"
- pre-commit
- On va faire les deux !
:::

::::

## Git



:::: {.columns}

::: {.column width="40%"}
<br>

- Git c'est <b>Google Drive sous st√©ro√Ødes</b>, pour des fichiers l√©gers
- comme des fichiers textes par exemple...
- ... et donc des fichiers de code!

<br>
<br>
<br>

- Git c'est surtout l'historique, avec les <b>commits</b>
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
![](./meme-git.jpg)
:::

::::

## pre-commit

## {auto-animate=true}

::: {style="margin-top: 100px;"}
Animating content
:::

## {auto-animate=true}

::: {style="margin-top: 200px; font-size: 3em; color: red;"}
Animating content
:::
