---
title: "Tout ce dont votre package a besoin"
author: "Joseph Barbier - *PyCon2025*"
format:
  revealjs:
    theme: [default, style.scss]
    transition: slide
    background-transition: fade
    incremental: true
    auto-stretch: false
embed-resources: true
echo: true
---

## A propos

<br>

:::: {.columns}

::: {.column width="35%"}
![](joseph.png){.circle}
<div style="font-size:0.6em;">
   *Joseph Barbier*

   <br><br>

   <a href="https://barbierjoseph.com">barbierjoseph.com</a>

   <a href="https://ysunflower.com">ysunflower.com</a>

</div>
:::

::: {.column width="15%"}
:::

::: {.column width="50%"}
<div style="font-size: 1.2em;">
   Freelance

   Open source

   Data(viz)

   ![](viz.png)
</div>
:::

::::

## Questions

<br>
<br>

<div style="font-size: 1.5em; font-style: italic;">

::: {.fragment .fade-in-then-semi-out}
Qui ne sait pas du tout ce qu'est un package Python ?
:::

<br>

::: {.fragment .fade-in-then-semi-out}
Qui a d√©j√† cr√©√© un package Python ?
:::

<br>

::: {.fragment .fade-in-then-semi-out}
Qui a d√©j√† mis sur PyPI un package Python ?
:::

<br>

::: {.fragment .fade-in-then-semi-out}
Qui contribue √† des packages Python open source ?
:::

</div>

## Le bon package et le mauvais package

![](./meme-bon-mauvais-package.png){width=40%}

Un bon package **c'est pas (uniquement) une question de code**.

- facile √† comprendre ?
- facile √† utiliser ?
- facile √† d√©velopper ?

## TLDR: package Python

```python
def my_super_cool_function(arg):
    if arg == "cool":
        something = 123
    else:
        ...

    ...

    return something
```

:::: {.columns}

::: {.column width="20%"}
:::

::: {.column width="30%"}
![](./arrow.svg){width=80%}
:::

::: {.column width="50%"}
![](./pkg.jpg){width=60%}
:::

::::

Facilement **distribuable** et donc **reutilisable** !


## Sommaire

<br>
<br>

### Votre package a besoin de ces 4 choses, <b>la derni√®re va vous surprendre üò±</b> !

<br>

- Ne jamais commit une erreur

- Tester dans les meilleures conditions

- Configuration du `pyproject.toml`

::: {.blur}
- Cr√©er la meilleure documentation
:::

## Parlons style de code !

![](meme-word-ide-2.png){fig-align="center" width="60%"}

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B
```

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
                    return np.sum([A, B])
```

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
                    return np.sum([A, B])


def divideNums( A , B):
        return A/B
def multiply(a,b ):
 return  a *b
```

## {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
                    return np.sum([A, B])


def divideNums( A , B):
        return A/B
def multiply(a,b ):
 return  a *b

def main( ) :
    x= add_nums(2,  3)
#some comment
    y=multiply( x ,4 )                            # in the middle of the sea
    print( "sum:",x  )
    print("product:" ,  y)
```

<br>

::: {.fragment}
Quelle est la premi√®re erreur qui va appara√Ætre?
:::

::: {.fragment}
<div style="font-size: 1.5em;">
    Code parfaitement valide ‚úÖ
</div>
:::

::: {.fragment}
On prend le m√™me code, mais on le standardise
:::

##

```{python}
import numpy as np


def add_nums(A, B):
    return A + B

def add_nums_numpy(A, B):
    return np.sum([A, B])

def divideNums(A, B):
    return A / B

def multiply(a, b):
    return a * b

def main():
    x = add_nums(2, 3)
    # some comment
    y = multiply(x, 4)  # in the middle of the sea
    print("sum:", x)
    print("product:", y)
```

- indentation ‚úÖ
- commentaires ‚úÖ
- import ‚úÖ
- sauts de ligne ‚úÖ

##

:::: {.columns}

::: {.column width="50%"}
![](./meme-formateur.jpg)
:::

::: {.column width="10%"}
:::

::: {.column width="40%"}
<br>

:::{.fragment}
[ruff](https://docs.astral.sh/ruff/) est probablement la meilleure option
:::

<br>

:::{.fragment}
2 mani√®res d'utiliser :
:::

- "on save"
- pre-commit

:::{.fragment}
‚Üí pre-commit est le plus important!
:::
:::

::::

## Git



:::: {.columns}

::: {.column width="40%"}
<br>

- Git c'est <b>Google Drive sous st√©ro√Ødes</b>, mais pour des fichiers l√©gers
- comme des fichiers textes par exemple...
- ... et donc des fichiers de code!

<br>
<br>
<br>

- Git c'est surtout l'historique, avec les <b>commits</b>
- Mais on veut que l'historique soit propre !
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
![](./meme-git.jpg)
:::

::::

## pre-commit

<br>

A chaque commit, fait tourner une s√©rie de check qu'on aura d√©finit

- [ruff](https://docs.astral.sh/ruff/)
- [check added large files](https://github.com/pre-commit/pre-commit-hooks/blob/main/pre_commit_hooks/check_added_large_files.py)
    - met une taille limite de fichier
- [check yaml](https://github.com/pre-commit/pre-commit-hooks/blob/main/pre_commit_hooks/check_yaml.py)
    - v√©rifie la parsabilit√© des fichiers yaml

<br>

:::{.fragment}
Vous n'avez plus √† penser √† cela, tout est v√©rifi√© en amont
:::


## Tests

:::: {.columns}

::: {.column width="30%"}
![](./meme-testing.jpg)
:::

::: {.column width="70%"}
Tester son code √ßa veut dire quoi ?

- v√©rifier que le code **n'a pas d'erreur**
- v√©rifier que le code **fait ce que je pense**
- v√©rifier que le code **fonctionne dans diff√©rents sc√©narios**
- v√©rifier que le code **fonctionne dans diff√©rents environnements**

<br>

:::{.fragment .fade-in-then-semi-out}
Il suffit de le faire tourner!
:::
:::{.fragment style="color: red; font-weight: bold; font-size: 1.5em; font-style: italic;"}
Il suffit de le faire tourner?
:::
:::

::::

## Comment (et quoi) tester

:::: {.columns}

::: {.column width="60%"}
- trust yourself
    - ‚ùå pas d'erreur
    - ‚ùå fait ce que je pense
    - ‚ùå diff√©rents sc√©narios
    - ‚ùå diff√©rents environnements
- lancer un exemple d'utilisation
    - ‚úÖ pas d'erreur
    - ‚ùì fait ce que je pense
    - ‚ùå diff√©rents sc√©narios
    - ‚ùå diff√©rents environnements
- √©crire des tests unitaires
    - ‚úÖ pas d'erreur
    - ‚úÖ fait ce que je pense
    - ‚úÖ diff√©rents sc√©narios
    - ‚ùå diff√©rents environnements
- git push ‚úÖ
:::

::: {.column width="40%"}
![](./meme-test.jpg)
:::

::::

## Github actions {auto-animate=true}

Scrits (yaml) qui se d√©clenchent dans certaines conditions

- pull requests
- push
- tous les jours √† minuit

<br>

:::{.fragment .fade-in-then-semi-out}
‚Üí faire tourner les tests unitaires
:::

:::{.fragment .fade-in-then-semi-out}
‚Üí sur plusieurs versions de Python (open source ?)
:::

:::{data-id="os" .fragment .fade-in-then-semi-out}
‚Üí sur plusieurs OS
:::

:::{.fragment .fade-in-then-semi-out}
‚Üí **Et cela tout le temps!**
:::

## Github actions  {auto-animate=true}

::: {data-id="os" style="margin-top: 100px; font-size: 3em;"}
sur plusieurs OS
:::

## Github actions  {auto-animate=true}

::: {data-id="os" style="margin-top: 100px; font-size: 3.2em; color: red;"}
sur plusieurs OS ???
:::

<br>

:::{.fragment .callout-warning style="font-size: 1.4em;"}
Python est interpr√©t√©, mais peut se comporter diff√©remment en fonction de l'OS

- noms de fichiers
- chemins
- fichiers temporaires
- permissions
- modules sp√©cifiques
:::

## *one ~~ring~~ **file** to rule them all*

<br>

Un package √ßa se d√©compose en :

- du code Python

- des m√©ta donn√©es
    - un nom, une description, des auteur.e.s
    - des d√©pendances
    - une license
    - ...

<br>

<div style="display: flex; justify-content: center; font-size: 2em;" class="fragment">
‚ú®`pyproject.toml`‚ú®
</div>


## *one ~~ring~~ **file** to rule them all*

<br>

<div style="display: flex; justify-content: center; font-size: 1.7em;">
`pyproject.toml` + [uv](https://docs.astral.sh/uv/) = <3
</div>

<br>

![](./meme-pyproject.jpg){fig-align="center" width="50%"}

## Gestion des d√©pendances

<br>

![](./dependencies-scheme.png){width="50%" fig-align="center" }

## Gestion des d√©pendances

<br>

:::: {.columns}

::: {.column width="45%"}

![](./dependencies-fastapi.png)

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

![](./dependencies-numpy.png)

:::

::::

## Gestion des d√©pendances

<br>

- open source ‚Üí √™tre convenient

:::{.fragment}
`numpy>=2.1.0`
:::

<br>
<br>

- closed source ‚Üí restreindre autant que possible

:::{.fragment}
`numpy==2.1.3`
:::

## Aller plus loin

- [Python packaging essentials](https://y-sunflower.github.io/python-packaging-essentials/)
- [Python package template](https://github.com/y-sunflower/python-package-template)

    - des projets open source pour la communaut√©
    - vous voulez contribuer ? c'est super facile !


##

<div style="display: flex; justify-content: center; font-size: 3em;">
Merci !
</div>

J'ai dis des choses pertinentes ?

::: {.nonincremental}
- venez m'en parler
:::

J'ai dis des choses fausses ?

::: {.nonincremental}
- venez m'en parler (!!!)
:::

<br>

Autres ?

::: {.nonincremental}
- venez me voir !
- linkedin: Joseph Barbier
- mail: `joseph.barbierdarnal@gmail.com`
- slides: [github.com/JosephBARBIERDARNAL/talk](https://github.com/JosephBARBIERDARNAL/talk/tree/main/src/pycon2025)
:::
