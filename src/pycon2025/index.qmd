---
title: "Tout ce dont votre package a besoin"
author: "Joseph Barbier - *PyCon2025*"
format:
  revealjs: 
    theme: [default, style.scss]
    transition: slide
    background-transition: fade
    incremental: true   
embed-resources: true
echo: true
---

## A propos

<br>

:::: {.columns}

::: {.column width="35%"}
![](joseph.png){.circle}
<div style="font-size:0.6em;">
   *Joseph Barbier*
   
   <br><br>
   
   <a href="https://barbierjoseph.com">barbierjoseph.com</a>

   <a href="https://github.com/JosephBARBIERDARNAL">github.com/JosephBARBIERDARNAL</a>
</div>
:::

::: {.column width="15%"}
:::

::: {.column width="50%"}
<div style="font-size: 1.2em;">
   Freelance
   
   Open source
   
   Data(viz)

   ![](viz.png)
</div>
:::

::::

## Package Python

<div style="font-size: 1.2em;">
   - Qui a déjà créé un package Python ?
   <br>
   <br>
   - Qui comprend quand on lui parle de package ?
   <br>
   <br>
   - Qui comprend quand on lui parle de package ?
</div>

## Parlons style de code !

![](meme-word-ide-2.png){fig-align="center" width="70%"}

## Code style {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B
```

## Code style {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
     return np.sum([A, B])
```

## Code style {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
     return np.sum([A, B])


def divideNums( A , B):
        return A/B
def multiply(a,b ):
 return  a *b
```

## Code style {auto-animate="true"}

```{python}
def add_nums(  A ,B):return A+B

import numpy as np
def add_nums_numpy(  A ,B):
     return np.sum([A, B])


def divideNums( A , B):
        return A/B
def multiply(a,b ):
 return  a *b

def main( ) :
    x= add_nums(2,  3) 
#some comment
    y=multiply( x ,4 )                            # in the middle of the sea
    print( "sum:",x  )
    print("product:" ,  y)
```

## Code style

```{python}
import numpy as np


def add_nums(A, B):
    return A + B


def add_nums_numpy(A, B):
    return np.sum([A, B])


def divideNums(A, B):
    return A / B


def multiply(a, b):
    return a * b


def main():
    x = add_nums(2, 3)
    # some comment
    y = multiply(x, 4)  # in the middle of the sea
    print("sum:", x)
    print("product:", y)
```

## {auto-animate=true}

::: {style="margin-top: 100px;"}
Animating content
:::

## {auto-animate=true}

::: {style="margin-top: 200px; font-size: 3em; color: red;"}
Animating content
:::